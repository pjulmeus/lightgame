{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({\n  nrows,\n  ncols,\n  chanceLightStartsOn\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard);\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for (let y = 0; y < nrows; y++) {\n      initialBoard.push(Array.from({\n        length: ncols\n      }));\n    }\n    for (let x = 0; x < initialBoard.length; x++) {\n      let cells = initialBoard[x];\n      for (let c = 0; c < cells.length; c++) {\n        if (Math.random() <= chanceLightStartsOn / 100) {\n          cells[c] = true;\n        } else {\n          cells[c] = false;\n        }\n      }\n    }\n    return initialBoard;\n  }\n\n  //   return (<>\n  //   {board.map(b => <div>{b.map(r => <div>{console.log(r)}</div>)}\n  //   </div>)}\n  //   <p>{board}</p>\n  //   </>)\n  // }\n  function hasWon() {\n    board.filter(b => b);\n    //    for(let i = 0; i < board.length; i++){\n    //     let cell = board[i]\n    //     for(let c = 0; c < cell.length; c++){\n    //       console.log(cell[c])\n    //       if(cell[c]=== true){\n    //         console.log(\"it's true\")\n    //         return\n    //    } else {\n    //     return alert(\"You Have Won\")\n    //    }\n    //   } \n    // }\n    // TODO: check the board in state to determine whether the player has won.\n    //if true return \n    //else \"YOU HAVE FUN\"\n  }\n  console.log(hasWon());\n}\n//   function flipCellsAround(coord) {\n//     setBoard(oldBoard => {\n//       const [y, x] = coord.split(\"-\").map(Number);\n\n//       const flipCell = (y, x, boardCopy) => {\n//         // if this coord is actually on board, flip it\n\n//         if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n//           boardCopy[y][x] = !boardCopy[y][x];\n//         }\n//       };\n\n//       // TODO: Make a (deep) copy of the oldBoard\n\n//       // TODO: in the copy, flip this cell and the cells around it\n\n//       // TODO: return the copy\n//     });\n//   }\n\n//   // if the game is won, just show a winning msg & render nothing else\n\n//   // TODO\n\n//   // make table board\n\n//   // TODO\n// }\n_s(Board, \"zVoq4WVA109ToUXeeG7gqKArgbM=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","initialBoard","y","push","Array","from","length","x","cells","c","Math","random","hasWon","filter","b","console","log","_c","$RefreshReg$"],"sources":["/Users/pjulmeus/lightGame/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard);\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = []; \n    for(let y = 0; y < nrows; y++){\n        initialBoard.push(Array.from({length: ncols}))\n    }    \n      for(let x = 0; x < initialBoard.length; x++){\n       let cells = initialBoard[x]\n        for(let c = 0; c < cells.length; c++){   \n            if(Math.random() <= (chanceLightStartsOn/100)) {\n          cells[c] =true\n        }else{\n            cells[c]= false\n        }           \n      }\n  }\n    return initialBoard;\n  }\n\n\n//   return (<>\n//   {board.map(b => <div>{b.map(r => <div>{console.log(r)}</div>)}\n//   </div>)}\n//   <p>{board}</p>\n//   </>)\n// }\n  function hasWon() {\n    board.filter(b=> b)\n//    for(let i = 0; i < board.length; i++){\n//     let cell = board[i]\n//     for(let c = 0; c < cell.length; c++){\n//       console.log(cell[c])\n//       if(cell[c]=== true){\n//         console.log(\"it's true\")\n//         return\n//    } else {\n//     return alert(\"You Have Won\")\n//    }\n//   } \n// }\n    // TODO: check the board in state to determine whether the player has won.\n    //if true return \n  //else \"YOU HAVE FUN\"\n\n  }\n  console.log(hasWon())\n}\n//   function flipCellsAround(coord) {\n//     setBoard(oldBoard => {\n//       const [y, x] = coord.split(\"-\").map(Number);\n\n//       const flipCell = (y, x, boardCopy) => {\n//         // if this coord is actually on board, flip it\n\n//         if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n//           boardCopy[y][x] = !boardCopy[y][x];\n//         }\n//       };\n\n//       // TODO: Make a (deep) copy of the oldBoard\n\n//       // TODO: in the copy, flip this cell and the cells around it\n\n//       // TODO: return the copy\n//     });\n//   }\n\n//   // if the game is won, just show a winning msg & render nothing else\n\n//   // TODO\n\n//   // make table board\n\n//   // TODO\n// }\n\nexport default Board;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAO,aAAa;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,KAAKA,CAAC;EAAEC,KAAK;EAAEC,KAAK;EAAEC;AAAoB,CAAC,EAAE;EAAAC,EAAA;EACpD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAACS,WAAW,CAAC;;EAE/C;EACA,SAASA,WAAWA,CAAA,EAAG;IACrB,IAAIC,YAAY,GAAG,EAAE;IACrB,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,KAAK,EAAEQ,CAAC,EAAE,EAAC;MAC1BD,YAAY,CAACE,IAAI,CAACC,KAAK,CAACC,IAAI,CAAC;QAACC,MAAM,EAAEX;MAAK,CAAC,CAAC,CAAC;IAClD;IACE,KAAI,IAAIY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,YAAY,CAACK,MAAM,EAAEC,CAAC,EAAE,EAAC;MAC3C,IAAIC,KAAK,GAAGP,YAAY,CAACM,CAAC,CAAC;MAC1B,KAAI,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACF,MAAM,EAAEG,CAAC,EAAE,EAAC;QACjC,IAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,IAAKf,mBAAmB,GAAC,GAAI,EAAE;UACjDY,KAAK,CAACC,CAAC,CAAC,GAAE,IAAI;QAChB,CAAC,MAAI;UACDD,KAAK,CAACC,CAAC,CAAC,GAAE,KAAK;QACnB;MACF;IACJ;IACE,OAAOR,YAAY;EACrB;;EAGF;EACA;EACA;EACA;EACA;EACA;EACE,SAASW,MAAMA,CAAA,EAAG;IAChBd,KAAK,CAACe,MAAM,CAACC,CAAC,IAAGA,CAAC,CAAC;IACvB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACI;IACA;IACF;EAEA;EACAC,OAAO,CAACC,GAAG,CAACJ,MAAM,CAAC,CAAC,CAAC;AACvB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AAAAf,EAAA,CA7ESJ,KAAK;AAAAwB,EAAA,GAALxB,KAAK;AA+Ed,eAAeA,KAAK;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}