{"ast":null,"code":"var _jsxFileName = \"/Users/pjulmeus/lightGame/react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows,\n  ncols,\n  chanceLightStartsOn\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard);\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for (let y = 0; y < nrows; y++) {\n      initialBoard.push(Array.from({\n        length: ncols\n      }));\n    }\n    for (let x = 0; x < initialBoard.length; x++) {\n      let cells = initialBoard[x];\n      for (let c = 0; c < cells.length; c++) {\n        if (Math.random() <= chanceLightStartsOn / 100) {\n          cells[c] = true;\n        } else {\n          cells[c] = false;\n        }\n      }\n    }\n    return initialBoard;\n  }\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    //if true return \n    //else \"YOU HAVE FUN\"\n    board.map(b => {\n      if (b.includes(true)) return;else return alert(\"You Have Won!\");\n    });\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      let oldCopyBoard = [...oldBoard];\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      flipCell(y, x, oldCopyBoard);\n\n      // TODO: return the copy\n\n      return oldCopyBoard;\n    });\n  }\n  hasWon();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: board.map(b => /*#__PURE__*/_jsxDEV(\"td\", {\n      children: b.map(c => /*#__PURE__*/_jsxDEV(Cell, {\n        flipCellsAroundMe: flipCellsAround\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 38\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 23\n    }, this))\n  }, void 0, false)\n  //  <Cell flipCellsAroundMe={flipCellsAround} isLit={c}/>\n  ;\n}\n_s(Board, \"zVoq4WVA109ToUXeeG7gqKArgbM=\");\n_c = Board;\n{/* //   return (<>\n //   {board.map(b => <div>{b.map(r => <div>{console.log(r)}</div>)}\n //   </div>)}\n //   <p>{board}</p>\n //   </>)\n //  */}\n{/* //   function flipCellsAround(coord) {\n //     setBoard(oldBoard => {\n //       const [y, x] = coord.split(\"-\").map(Number);\n //       const flipCell = (y, x, boardCopy) => {\n //         // if this coord is actually on board, flip it\n //         if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n //           boardCopy[y][x] = !boardCopy[y][x];\n //         }\n //       };\n //       // TODO: Make a (deep) copy of the oldBoard\n //       // TODO: in the copy, flip this cell and the cells around it\n //       // TODO: return the copy\n //     });\n //   }\n //   // if the game is won, just show a winning msg & render nothing else\n //   // TODO\n //   // make table board\n //   // TODO\n // } */}\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Fragment","_Fragment","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","initialBoard","y","push","Array","from","length","x","cells","c","Math","random","hasWon","map","b","includes","alert","flipCellsAround","coord","oldBoard","split","Number","flipCell","boardCopy","oldCopyBoard","children","flipCellsAroundMe","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/pjulmeus/lightGame/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard);\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = []; \n    for(let y = 0; y < nrows; y++){\n        initialBoard.push(Array.from({length: ncols}))\n    }    \n      for(let x = 0; x < initialBoard.length; x++){\n       let cells = initialBoard[x]\n        for(let c = 0; c < cells.length; c++){   \n            if(Math.random() <= (chanceLightStartsOn/100)) {\n          cells[c] =true\n        }else{\n            cells[c]= false\n        }           \n      }\n  }\n    return initialBoard;\n  }\n\n  function hasWon() {\n  // TODO: check the board in state to determine whether the player has won.\n  //if true return \n  //else \"YOU HAVE FUN\"\n   (board.map(b=> {\n    if(b.includes(true)) return \n    else return alert(\"You Have Won!\")\n   }))\n  }\n\n    function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n        let oldCopyBoard = [...oldBoard]\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n        flipCell(y, x, oldCopyBoard)\n\n      // TODO: return the copy\n\n      return oldCopyBoard\n    });\n  }\n    hasWon()\n\n    return (\n      <>\n     {board.map(b =>  <td>{b.map(c=> <Cell flipCellsAroundMe={flipCellsAround} / >)}</td> )}\n     </>\n    //  <Cell flipCellsAroundMe={flipCellsAround} isLit={c}/>\n  )\n    }\n\n{/* //   return (<>\n//   {board.map(b => <div>{b.map(r => <div>{console.log(r)}</div>)}\n//   </div>)}\n//   <p>{board}</p>\n//   </>)\n//  */}\n\n\n{/* //   function flipCellsAround(coord) {\n//     setBoard(oldBoard => {\n//       const [y, x] = coord.split(\"-\").map(Number);\n\n//       const flipCell = (y, x, boardCopy) => {\n//         // if this coord is actually on board, flip it\n\n//         if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n//           boardCopy[y][x] = !boardCopy[y][x];\n//         }\n//       };\n\n//       // TODO: Make a (deep) copy of the oldBoard\n\n//       // TODO: in the copy, flip this cell and the cells around it\n\n//       // TODO: return the copy\n//     });\n//   }\n\n//   // if the game is won, just show a winning msg & render nothing else\n\n//   // TODO\n\n//   // make table board\n\n//   // TODO\n// } */}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}